#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Node-RED
# Configures Node-RED before running
# ==============================================================================
declare port

# Migrate add-on data from the Home Assistant config folder,
# to the add-on configuration folder.
#if ! bashio::fs.file_exists '/config/settings.js' \
#    && bashio::fs.file_exists '/homeassistant/node-red/settings.js'; then
#    shopt -s dotglob
#    mv /homeassistant/node-red/* /config/ \
#        || bashio::exit.nok "Failed to migrate Node-RED configuration"
#fi

# Ensure configuration exists
if ! bashio::fs.directory_exists '/config/smartphoton/'; then
    mkdir -p /config/smartphoton/nodes \
        || bashio::exit.nok "Failed to create node-red configuration directory"

    # Copy in template files
    cp /etc/node-red/flows.json /config/smartphoton/
    cp /etc/node-red/settings.js /config/smartphoton/
	

    # Create random flow id
    id=$(node -e "console.log((1+Math.random()*4294967295).toString(16));")
    sed -i "s/%%ID%%/${id}/" "/config/smartphoton/flows.json"
fi

# VÃ©rification de version
if ! bashio::fs.file_exists '/config/smartphoton/version'; then
  touch /config/smartphoton/version
  VERSION=$(bashio::addon.version)
  echo $VERSION >> /config/smartphoton/version
  chmod 775 /config/smartphoton/version
  bashio::log.info "${VERSION}"
  
else

  VERSIONOLD=$(cat /config/smartphoton/version)
  VERSION=$(bashio::addon.version)
  
  if [ $VERSIONOLD != $VERSION ]; then
  
    bashio::log.info "Mise a jour de la nouvelle version"
  
    if bashio::fs.file_exists '/config/smartphoton/flows.backup'; then
      rm /config/smartphoton/flows.backup
    fi
	mv /config/smartphoton/flows.json /config/smartphoton/flows.backup
	cp /etc/node-red/flows.json /config/smartphoton/
	
	if bashio::fs.file_exists '/config/.storage/lovelace.dashboard_smartphoton.backup'; then
      rm /config/.storage/lovelace.dashboard_smartphoton.backup
    fi
	if bashio::fs.file_exists '/config/.storage/lovelace.dashboard_smartphoton'; then
      mv /config/.storage/lovelace.dashboard_smartphoton /config/.storage/lovelace.dashboard_smartphoton.backup
	  cp /etc/node-red/lovelace.dashboard_smartphoton /config/.storage/
    fi
	
  fi
  
fi

#Remplace le fichier flows par celui d'origine
if bashio::fs.file_exists '/config/smartphoton/flows.backup'; then
      rm /config/smartphoton/flows.backup
fi
mv /config/smartphoton/flows.json /config/smartphoton/flows.backup
cp /etc/node-red/flows.json /config/smartphoton/


#batterie=$(bashio::config 'batterie')
#onduleur=$(bashio::config 'onduleur')

#Choix de l'onduleur
ONDULEUR=$(bashio::config 'onduleur')
usbOnduleur=$(bashio::config 'usbonduleur')

if bashio::fs.file_exists '/config/smartphoton/elfinOnduleur'; then
	rm /config/smartphoton/elfinOnduleur
fi

if bashio::config.false 'elfinonduleur'; then

	if [ $ONDULEUR == 'voltronic' ]; then

		ttyOnduleur="/dev/tty-onduleur"
		echo "Configuration de l'onduleur Voltronic sur " $usbOnduleur

		sed -i -e "s@$ttyOnduleur@$usbOnduleur@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log


	elif [ $ONDULEUR == 'easun' ]; then

		ttyEASUN="/dev/ttyEASUN"
		echo "Configuration de l'onduleur Easun sur " $usbOnduleur

		sed -i -e "s@$ttyEASUN@$usbOnduleur@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log

	fi
else

	elfinOnduleurip=$(bashio::config 'elfinonduleurip')
	elfinOnduleurPort=$(bashio::config 'elfinonduleurport')
	touch /config/smartphoton/elfinOnduleur
	echo $elfinOnduleurip
	echo $elfinOnduleurPort
	echo $elfinOnduleurip":"$elfinOnduleurPort >> /config/smartphoton/elfinOnduleur

fi

#Choix de la Batterie
BATTERIE=$(bashio::config 'batterie')
usbBatterie=$(bashio::config 'usbbatterie')

if bashio::fs.file_exists '/config/smartphoton/elfinBatterie'; then
	rm /config/smartphoton/elfinBatterie
fi

if bashio::config.false 'elfinbatterie'; then
	if [ $BATTERIE == 'pylontech' ]; then

		ttyBatterie="/dev/tty-pylontech"
		echo "Configuration de l'onduleur Pylontech sur " $usbBatterie

		sed -i -e "s@$ttyBatterie@$usbBatterie@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log


	elif [ $ONDULEUR == 'jkbms' ]; then

		ttyBatterie="/dev/tty-jkbms"
		echo "Configuration de la batterie JKBMS sur " $usbBatterie

		sed -i -e "s@$ttyBatterie@$usbBatterie@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log

	fi

else

	elfinbatterieip=$(bashio::config 'elfinbatterieip')
	elfinbatteriePort=$(bashio::config 'elfinbatterieport')
	touch /config/smartphoton/elfinBatterie
	echo $elfinbatterieip
	echo $elfinbatteriePort
	echo $elfinbatterieip":"$elfinbatteriePort >> /config/smartphoton/elfinBatterie

fi

#if bashio::fs.file_exists '/config/smartphoton/usbOnduleur'; then
#  rm /config/smartphoton/usbOnduleur
#fi

#if bashio::fs.file_exists '/config/smartphoton/usbBatterie'; then
#  rm /config/smartphoton/usbBatterie

#fi

#touch /config/smartphoton/usbOnduleur
#ONDULEUR=$(bashio::config 'onduleur')
#echo $ONDULEUR >> /config/smartphoton/usbOnduleur
#bashio::log.info "${ONDULEUR}"


#touch /config/smartphoton/usbBatterie
#BATTERIE=$(bashio::config 'batterie')
#echo $BATTERIE >> /config/smartphoton/usbBatterie
#bashio::log.info "${BATTERIE}"




# Pass in port & SSL settings
port=$(bashio::addon.port 80)
sed -i "s/%%PORT%%/${port:-80}/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
if ! bashio::var.has_value "${port}"; then
    bashio::log.warning
    bashio::log.warning "Direct access mode is disabled, Node-RED Dashboard"
    bashio::log.warning "will not work!"
    bashio::log.warning
    bashio::log.warning "Please assign a port in the Network section of this"
    bashio::log.warning "add-on configuration."
    bashio::log.warning
fi

if bashio::config.true 'ssl'; then
    sed -i "s/%%SSL%%/true/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
else
    sed -i "s/%%SSL%%/false/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
fi

# Ensures conflicting Node-RED packages are absent
cd /config || bashio::exit.nok "Could not change directory to Node-RED"
if bashio::fs.file_exists "/config/package.json"; then
    npm uninstall \
        node-red-contrib-home-assistant \
        node-red-contrib-home-assistant-llat \
        node-red-contrib-home-assistant-ws \
            || bashio::log.warning "Failed un-installing conflicting packages"
fi
